---
layout: post
title:  "在“没有人的安全部”构筑护网防御工事（4）——漏洞修补"
date: 2022-07-21 02:06:26 +0800
author : Invo
categories: original
---




# 第四部分 漏洞修补

# 1 概述（what）

## 1.1 含义

任何系统都存在各种各样的漏洞，广义的漏洞是指任何可以引起系统的功能、数据、配置、设计等被破坏的交互点，这里可以包括一些不安全的配置、业务逻辑等，而这一章节的漏洞，是指应用、组件、基础软件自身的代码漏洞，这些漏洞可以通过修改代码、安装补丁等方式进行修复。

近些年来随着三方应用、开源组件越来越丰富和广泛被使用，一些重大的代码安全漏洞也通过这些组件被引入到组织的信息系统当中。而漏洞利用，仍然是攻击者入侵的最核心得分手段。

## 1.2 原理

漏洞修补的过程相对简单，主要步骤分为四步：1.发现漏洞 2.修复漏洞 3.验证效果 4.风险规避。

发现漏洞是指，通过已知信息推理系统可能存在的漏洞或通过具有特定特征的交互请求获得目标的响应，以判定系统是否存在漏洞。翻译成人话，一种是白盒，就是通过已知的软件名称、三方库、版本信息等数据，通过在公开漏洞库中检索，已获得系统可能存在的漏洞信息；另一种是黑盒，就是通过扫描器等漏洞发现工具，在假设系统是黑盒的情况使用枚举的手段探测和推测系统可能存在的漏洞。

修复漏洞是指，通过修改漏洞形成的机制或逻辑，使破坏系统的交互行为无法进行。通常修复漏洞需要修改代码，如果使用三方产品则需要升级版本或安装补丁包。

验证效果是指，模拟漏洞利用的手段，对漏洞利用的过程进行尝试复现，如果没有出现漏洞被成功利用，或者返回具有漏洞存在的特征的响应结果，那么代表漏洞修复成功。漏洞验证具有一定的技术能力要求，对于技术储备不足的组织来说，可以根据能力所及的水平，选择性的进行。

风险规避是指，在漏洞修复过程中，往往会存在一些客观原因，某些漏洞无法被修复（例如稳定性风险的考虑），此时需要通过其他方式让漏洞无法被利用，简而言之最简单的做法就是网络隔离或者将系统下线。

## 1.3 原则

1. 有效原则。通过各种手段发发现的系统漏洞数量之多往往超过管理员的预期，而且大量漏洞甚至看不懂什么意思。此时需要对漏洞进行分拣，有必要修复的漏洞务必要修复，没有必要修复的漏洞直接忽略即可。

2. 暴露面优先原则。从整体架构的角度，如果能够缩小风险暴露面，优先选择缩小暴露面，而后再考虑通过修复的方式处理漏洞。

3. 完全原则。很多漏洞修复的时候只处理某种验证或利用方式造成的后果，而没有从根本上解决问题，另一些时候，一些三方组件提供的补丁包存在被绕过的情况，面对这种问题需要充分考虑漏洞形成的机制和原理，从根源上将漏洞封堵，而不只是防止某一种利用方式。如果是三方组件，则需要安装到最新版本，并注意是否有补丁被绕过的情况。

# 2 目的（why）

漏洞是攻击者为获得系统权限而选择的核心攻击对象之一，攻击者通过利用漏洞，可以达到获得系统权限的目的，从而获得分数，或者进一步向内渗透。漏洞修补不仅是一个技术问题，也是一个治理问题，因此漏洞修补不一定在单点上追求极致的修复效果，但在整体上要尽可能做到充分的覆盖，以尽可能减少漏洞被利用成功的宏观概率。另一方面，对于系统的关键组件的关键功能（例如身份认证、权限管理），要确保漏洞修复的效果，避免单点脆弱性造成重大风险。

# 3 方案（how）

1. 暴露面分析

三方组件漏洞，建立资产清单

版本信息，升级到最新

自研的应用漏洞

sql注入 命令执行

用户输入的点，尽量限制为固定的字符串，如果要自定义，则需要过滤

临时下线或隔离。

接入WAF

# 4 需要注意的一些问题


# 5 展望？